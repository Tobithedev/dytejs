function tip(){console.warn("[Vadex Tips]: ",arguments[0])}let Dative;function setDative(t){Dative=t}var clone=function(t){return JSON.parse(JSON.stringify(t))};function Store(t={}){if(Dative){var n=this;n.options=t,n.actions=n.options.actions,n.mutations=n.options.mutations,n.plugins=n.options.plugins,n.listeners=[],n.state=new Proxy(n.options.state||{},{set:function(t,n,i){return t[n]=i,!0}}),void 0===n.plugins&&(n.plugins=[]),n.plugins.forEach(function(t){return t(n)})}else Dative.warn("[Vadex Warn]: Dative Not Found\nTry Using Dative.use(Vadex) To install Vadex with Dative")}Store.prototype.dispatch=function(t,n){this.actions[t]||Dative.warn(`[Vadex warn]: action ${t} is undefined`),this.actions[t]({commit:this.commit.bind(this),state:clone(this.state)},n),this.listeners.forEach(t=>t(this.mutations,this.state))},Store.prototype.commit=function(t,n){this.mutations[t]||Dative.warn(`[Vadex warn]: mutation ${t} is undefined`),this.mutations[t].call(null,this.state,n)},Store.prototype.subscribe=function(t){return this.listeners.push(t),function(){const n=this.listeners.indexOf(t);this.listeners.splice(n,1)}};var Vadex={Store:Store,install:install,version:"v1.0.0"};function install(t){Dative&&tip("Vadex is already installed. Dative.use(Vadex) should be called only once."),setDative(t)}void 0!==window.Dative&&window.Dative&&window.Dative.use(Vadex);export default Vadex;export{Store};